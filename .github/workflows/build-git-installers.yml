name: build-git-installers

on:
  push:

env:
  INCLUDE_SCALAR: 1

jobs:

  # Build and sign Mac OSX installers & upload artifacts
  osx_build:
    name: Build macOS
    runs-on: macos-latest
    env:
      # `gettext` is keg-only
      LDFLAGS: -L/usr/local/opt/gettext/lib
      CFLAGS: -I/usr/local/opt/gettext/include
      # To make use of the catalogs...
      XML_CATALOG_FILES: /usr/local/etc/xml/catalog
      VERSION: "2.36.1.vfs.0.1"
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          path: 'git'
          ref: sign-macos

      - name: Install Git dependencies
        run: |
          set -x
          brew install automake asciidoc xmlto docbook
          brew link --force gettext

      - name: Build payload
        run: |
          # Configure the environment
          set -x
          PATH=/usr/local/bin:$PATH
          export CURL_LDFLAGS=$(curl-config --libs)

          # Write to "version" file to force match with trigger payload version
          git -C ./git tag -am "a test tag" v2.36.1.vfs.0.1
          echo "v2.36.1.vfs.0.1" >>version
          make -C git -j$(sysctl -n hw.physicalcpu) GIT-VERSION-FILE dist dist-doc

          export GIT_BUILT_FROM_COMMIT=$(gunzip -c git/git-$VERSION.tar.gz | git get-tar-commit-id) ||
            die "Could not determine commit for build"
          
          # Extract tarballs
          mkdir payload manpages
          tar -xvf git/git-$VERSION.tar.gz -C payload
          tar -xvf git/git-manpages-$VERSION.tar.gz -C manpages

          # Lay out payload
          make -C git/.github V=1 payload
      
      - name: Prepare artifacts for upload
        run: |
          # This step is necessary because we cannot use the $VERSION
          # environment variable or the tag_version output from the prereqs
          # job in the upload-artifact task.
          mkdir -p build_artifacts
          cp -R stage/git-intel-x86_64-$VERSION/ build_artifacts

      - name: Upload macOS payload
        uses: actions/upload-artifact@v3
        with:
          name: tmp.osx_build
          path: |
            build_artifacts

  osx_artifacts_sign:
    name: Sign macOS payload
    # ESRP service requires signing to run on Windows
    runs-on: windows-latest
    needs: osx_build
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        path: 'git'
        ref: sign-macos

    - name: Download unsigned build artifiacts
      uses: actions/download-artifact@v3
      with:
        name: tmp.osx_build
        path: build_artifacts
    
    - name: Zip unsigned build artifacts
      shell: pwsh
      run: |
        Compress-Archive -Path build_artifacts build_artifacts/build_artifacts.zip
        cd build_artifacts
        Get-ChildItem -Exclude build_artifacts.zip | Remove-Item -Recurse -Force
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set up ESRP client
      shell: pwsh
      env:
        AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        AZURE_VAULT: ${{ secrets.AZURE_VAULT }}
        AUTH_CERT: ${{ secrets.AZURE_VAULT_AUTH_CERT_NAME }}
        REQUEST_SIGNING_CERT: ${{ secrets.AZURE_VAULT_REQUEST_SIGNING_CERT_NAME }}
      run: |
        git\.github\scripts\set-up-esrp.ps1
    
    - name: Run ESRP client
      shell: pwsh
      env:
        AZURE_AAD_ID: ${{ secrets.AZURE_AAD_ID }}
        # We temporarily need two AAD IDs, as we're using an SSL certificate associated
        # with an older App Registration until we have the required hardware to approve
        # the new certificate in SSL Admin.
        AZURE_AAD_ID_SSL: ${{ secrets.AZURE_AAD_ID_SSL }}
        APPLE_KEY_CODE: ${{ secrets.APPLE_KEY_CODE }}
        APPLE_SIGNING_OP_CODE: ${{ secrets.APPLE_SIGNING_OPERATION_CODE }}
      run: |
        python git\.github\scripts\run-esrp-signing.py build_artifacts `
         $env:APPLE_KEY_CODE $env:APPLE_SIGNING_OP_CODE `
         --params 'Hardening' '--options=runtime'
    
    - name: Unzip signed build artifacts
      shell: pwsh
      run: |
        Expand-Archive signed/build_artifacts.zip -DestinationPath signed
        Remove-Item signed/build_artifacts.zip
    
    - name: Upload signed payload
      uses: actions/upload-artifact@v3
      with:
        name: osx_artifacts_sign
        path: |
          signed

  osx_pack:
    name: Package macOS artifacts
    runs-on: macos-latest
    needs: osx_artifacts_sign
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          path: 'git'
          ref: sign-macos          

      - name: Download signed artifacts
        uses: actions/download-artifact@v3
        with:
          name: osx_artifacts_sign

      - name: Build macOS pkg
        env:
          VERSION: "2.36.1.vfs.0.1"
        run: |
          # Configure the environment
          export CURL_LDFLAGS=$(curl-config --libs)

          PATH=/usr/local/bin:$PATH \
          make -C git/.github V=1 pkg ||
            die "Build failed"
        
      - name: Upload unsigned pkg
        uses: actions/upload-artifact@v3
        with:
          name: tmp.osx_pkg
          path: |
            git/.github/disk-image
    
  osx_pkg_sign:
    name: Sign and notarize macOS package
    # ESRP service requires signing to run on Windows
    runs-on: windows-latest
    needs: osx_pack
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:
          path: 'git'
          ref: sign-macos

    - name: Download unsigned package
      uses: actions/download-artifact@v3
      with:
        name: tmp.osx_pkg
        path: pkg
    
    - name: Zip unsigned package
      shell: pwsh
      run: |
        Compress-Archive -Path pkg/*.pkg pkg/msft-git-pkg.zip
        cd pkg
        Get-ChildItem -Exclude msft-git-pkg.zip | Remove-Item -Recurse -Force
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set up ESRP client
      shell: pwsh
      env:
        AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        AZURE_VAULT: ${{ secrets.AZURE_VAULT }}
        AUTH_CERT: ${{ secrets.AZURE_VAULT_AUTH_CERT_NAME }}
        REQUEST_SIGNING_CERT: ${{ secrets.AZURE_VAULT_REQUEST_SIGNING_CERT_NAME }}
      run: |
        git\.github\scripts\set-up-esrp.ps1
    
    - name: Sign package
      shell: pwsh
      env:
        AZURE_AAD_ID: ${{ secrets.AZURE_AAD_ID }}
        # We temporarily need two AAD IDs, as we're using an SSL certificate associated
        # with an older App Registration until we have the required hardware to approve
        # the new certificate in SSL Admin.
        AZURE_AAD_ID_SSL: ${{ secrets.AZURE_AAD_ID_SSL }}
        APPLE_KEY_CODE: ${{ secrets.APPLE_KEY_CODE }}
        APPLE_SIGNING_OP_CODE: ${{ secrets.APPLE_SIGNING_OPERATION_CODE }}
      run: |
        python git\.github\scripts\run-esrp-signing.py pkg $env:APPLE_KEY_CODE $env:APPLE_SIGNING_OP_CODE
    
    - name: Unzip signed package
      shell: pwsh
      run: |
        mkdir unsigned
        Expand-Archive -LiteralPath signed\msft-git-pkg.zip -DestinationPath .\unsigned -Force
        Remove-Item signed\msft-git-pkg.zip -Force
    
    - name: Notarize signed package
      shell: pwsh
      env:
        AZURE_AAD_ID: ${{ secrets.AZURE_AAD_ID }}
        # We temporarily need two AAD IDs, as we're using an SSL certificate associated
        # with an older App Registration until we have the required hardware to approve
        # the new certificate in SSL Admin.
        AZURE_AAD_ID_SSL: ${{ secrets.AZURE_AAD_ID_SSL }}
        APPLE_KEY_CODE: ${{ secrets.APPLE_KEY_CODE }}
        APPLE_NOTARIZATION_OP_CODE: ${{ secrets.APPLE_NOTARIZATION_OPERATION_CODE }}
      run: |
        python git\.github\scripts\run-esrp-signing.py unsigned $env:APPLE_KEY_CODE `
          $env:APPLE_NOTARIZATION_OP_CODE --params 'BundleId' 'com.microsoft.git'
    
    - name: Upload signed and notarized pkg
      uses: actions/upload-artifact@v3
      with:
        name: osx_pkg_sign
        path: |
          signed

  osx_dmg:
    name: Build and publish macOS dmg
    runs-on: macos-latest
    needs: osx_pkg_sign
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        path: 'git'
        ref: sign-macos

    - name: Download signed package
      uses: actions/download-artifact@v3
      with:
        name: osx_pkg_sign
        path: disk-image

    - name: Build macOS disk image
      env:
        VERSION: "2.36.1.vfs.0.1"
      run: |
        PATH=/usr/local/bin:$PATH \
        make -C git/.github V=1 image || die "Build failed"

    - name: Publish disk image
      uses: actions/upload-artifact@v3
      with:
        name: osx_dmg
        path: git/.github/*.dmg
  # End build and sign Mac OSX installers

    # Build & sign Ubuntu package
  ubuntu_build:
    runs-on: ubuntu-18.04
    steps:
      - name: Install git dependencies
        run: |
          set -ex
          sudo apt-get update -q
          sudo apt-get install -y -q --no-install-recommends gettext libcurl4-gnutls-dev libpcre3-dev asciidoc xmlto
      - name: Clone git
        uses: actions/checkout@v3
        with:
          path: 'git'
          ref: sign-macos-test
      - name: Build and package .deb
        run: |
          set -ex
          die () {
              echo "$*" >&2
              exit 1
          }
          echo "2.36.1.vfs.0.1" >>git/version
          make -C git GIT-VERSION-FILE
          VERSION="2.36.1.vfs.0.1"
          ARCH="$(dpkg-architecture -q DEB_HOST_ARCH)"
          if test -z "$ARCH"; then
            die "Could not determine host architecture!"
          fi
          PKGNAME="microsoft-git_$VERSION"
          PKGDIR="$(dirname $(pwd))/$PKGNAME"
          rm -rf "$PKGDIR"
          mkdir -p "$PKGDIR"
          DESTDIR="$PKGDIR" make -C git -j5 V=1 DEVELOPER=1 \
            USE_LIBPCRE=1 \
            NO_CROSS_DIRECTORY_HARDLINKS=1 \
            ASCIIDOC8=1 ASCIIDOC_NO_ROFF=1 \
            ASCIIDOC='TZ=UTC asciidoc' \
            prefix=/usr/local \
            gitexecdir=/usr/local/lib/git-core \
            libexecdir=/usr/local/lib/git-core \
            htmldir=/usr/local/share/doc/git/html \
            install install-doc install-html
          cd ..
          mkdir "$PKGNAME/DEBIAN"
          # Based on https://packages.ubuntu.com/xenial/vcs/git
          cat >"$PKGNAME/DEBIAN/control" <<EOF
          Package: microsoft-git
          Version: $VERSION
          Section: vcs
          Priority: optional
          Architecture: $ARCH
          Depends: libcurl3-gnutls, liberror-perl, libexpat1, libpcre2-8-0, perl, perl-modules, zlib1g
          Maintainer: Git Fundamentals <git-fundamentals@github.com>
          Description: Git client built from the https://github.com/microsoft/git repository,
            specialized in supporting monorepo scenarios. Includes the Scalar CLI.
          EOF
          dpkg-deb --build "$PKGNAME"
          mkdir $GITHUB_WORKSPACE/artifacts
          mv "$PKGNAME.deb" $GITHUB_WORKSPACE/artifacts/
      - name: Publish unsigned .deb package
        uses: actions/upload-artifact@v2
        with:
          name: deb-package-unsigned
          path: artifacts/
  ubuntu_sign-artifacts:
    runs-on: windows-latest # Must be run on Windows due to ESRP executable OS compatibility
    needs: [ubuntu_build]
    env:
      ARTIFACTS_DIR: artifacts
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          ref: sign-macos-test
          path: 'git'
      - name: Download unsigned packages
        uses: actions/download-artifact@v2
        with:
          name: deb-package-unsigned
          path: unsigned          
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}    
      - name: Set up ESRP client
        shell: pwsh
        env:
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
          AZURE_VAULT: ${{ secrets.AZURE_VAULT }}
          AUTH_CERT: ${{ secrets.AZURE_VAULT_AUTH_CERT_NAME }}
          REQUEST_SIGNING_CERT: ${{ secrets.AZURE_VAULT_REQUEST_SIGNING_CERT_NAME }}
        run: |
          git\.github\scripts\set-up-esrp.ps1    
      - name: Sign package
        shell: pwsh
        env:
          AZURE_AAD_ID: ${{ secrets.AZURE_AAD_ID }}
          # We temporarily need two AAD IDs, as we're using an SSL certificate associated
          # with an older App Registration until we have the required hardware to approve
          # the new certificate in SSL Admin.
          AZURE_AAD_ID_SSL: ${{ secrets.AZURE_AAD_ID_SSL }}
          LINUX_KEY_CODE: ${{ secrets.LINUX_KEY_CODE }}
          LINUX_OP_CODE: ${{ secrets.LINUX_OPERATION_CODE }}
        run: |
          python git\.github\scripts\run-esrp-signing.py unsigned $env:LINUX_KEY_CODE $env:LINUX_OP_CODE
      - name: Upload signed artifact
        uses: actions/upload-artifact@v2
        with:
          name: deb-package-signed
          path: signed
  # End build & sign Ubuntu package