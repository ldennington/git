name: build-git-installers

on:
  push:
    tags:
      - 'v[0-9]*vfs*' # matches "v<number><any characters>vfs<any characters>"

jobs:
  # Check prerequisites for the workflow
  prereqs:
    runs-on: ubuntu-latest
    env:
      AZ_SUB: ${{ secrets.AZURE_SUBSCRIPTION }}
      AZ_CREDS: ${{ secrets.AZURE_CREDENTIALS }}
    outputs:
      tag_name: ${{ steps.tag.outputs.name }}           # The full name of the tag, e.g. v2.32.0.vfs.0.0
      tag_version: ${{ steps.tag.outputs.version }}     # The version number (without preceding "v"), e.g. 2.32.0.vfs.0.0
      deb_signable: ${{ steps.deb.outputs.signable }}   # Whether the credentials needed to sign the .deb package are available
    steps:
      - name: Determine tag to build
        run: |
          echo "::set-output name=name::${GITHUB_REF#refs/tags/}"
          echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
        id: tag
      - name: Determine whether signing certificates are present
        run: echo "::set-output name=signable::$([[ $AZ_SUB != '' && $AZ_CREDS != '' ]] && echo 'true' || echo 'false')"
        id: deb
      - name: Clone git
        uses: actions/checkout@v2
      - name: Validate the tag identified with trigger
        run: |
          die () {
            echo "::error::$*" >&2
            exit 1
          }

          # `actions/checkout` only downloads the peeled tag (i.e. the commit)
          git fetch origin +$GITHUB_REF:$GITHUB_REF

          # Verify that the tag is annotated
          test $(git cat-file -t "$GITHUB_REF") == "tag" || die "Tag ${{ steps.tag.outputs.name }} is not annotated"

          # Verify tag follows rules in GIT-VERSION-GEN (i.e., matches the specified "DEF_VER" in
          # GIT-VERSION-FILE) and matches tag determined from trigger
          make GIT-VERSION-FILE
          test "${{ steps.tag.outputs.version }}" == "$(sed -n 's/^GIT_VERSION = //p'< GIT-VERSION-FILE)" || die "GIT-VERSION-FILE tag does not match ${{ steps.tag.outputs.name }}"
  # End check prerequisites for the workflow

  # Build and sign Mac OSX installers & upload artifacts
  osx_build:
    runs-on: macos-latest
    needs: prereqs
    env:
      # `gettext` is keg-only
      LDFLAGS: -L/usr/local/opt/gettext/lib
      CFLAGS: -I/usr/local/opt/gettext/include
      # To make use of the catalogs...
      XML_CATALOG_FILES: /usr/local/etc/xml/catalog
      VERSION: "${{ needs.prereqs.outputs.tag_version }}"
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          path: 'git'

      - name: Install Git dependencies
        run: |
          set -x
          brew install automake asciidoc xmlto docbook
          brew link --force gettext

      - name: Build payload
        run: |
          # Configure the environment
          set -x
          PATH=/usr/local/bin:$PATH
          export CURL_LDFLAGS=$(curl-config --libs)

          # Write to "version" file to force match with trigger payload version
          echo "${{ needs.prereqs.outputs.tag_version }}" >>git/version
          make -C git -j$(sysctl -n hw.physicalcpu) GIT-VERSION-FILE dist dist-doc

          export GIT_BUILT_FROM_COMMIT=$(gunzip -c git/git-$VERSION.tar.gz | git get-tar-commit-id) ||
            die "Could not determine commit for build"

          # Extract tarballs
          mkdir payload manpages
          tar -xvf git/git-$VERSION.tar.gz -C payload
          tar -xvf git/git-manpages-$VERSION.tar.gz -C manpages

          # Lay out payload
          make -C git/.github/macos-installer V=1 payload

          # This step is necessary because we cannot use the $VERSION
          # environment variable or the tag_version output from the prereqs
          # job in the upload-artifact task.
          mkdir -p build_artifacts
          cp -R stage/git-intel-x86_64-$VERSION/ build_artifacts

          # We keep a list of executable files because their executable bits are
          # removed when they are zipped, and we need to re-add.
          find build_artifacts -type f -a -perm -u=x >executable-files.txt

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tmp.osx-build
          path: |
            build_artifacts

      - name: Upload list of executable files
        uses: actions/upload-artifact@v3
        with:
          name: tmp.executable-files
          path: |
            executable-files.txt

  osx_sign_payload:
    # ESRP service requires signing to run on Windows
    runs-on: windows-latest
    needs: osx_build
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        path: 'git'

    - name: Download unsigned build artifiacts
      uses: actions/download-artifact@v3
      with:
        name: tmp.osx-build
        path: build_artifacts

    - name: Zip unsigned build artifacts
      shell: pwsh
      run: |
        Compress-Archive -Path build_artifacts build_artifacts/build_artifacts.zip
        cd build_artifacts
        Get-ChildItem -Exclude build_artifacts.zip | Remove-Item -Recurse -Force

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up ESRP client
      shell: pwsh
      env:
        AZURE_VAULT: ${{ secrets.AZURE_VAULT }}
        AUTH_CERT: ${{ secrets.AZURE_VAULT_AUTH_CERT_NAME }}
        REQUEST_SIGNING_CERT: ${{ secrets.AZURE_VAULT_REQUEST_SIGNING_CERT_NAME }}
      run: |
        git\.github\scripts\set-up-esrp.ps1

    - name: Run ESRP client
      shell: pwsh
      env:
        AZURE_AAD_ID: ${{ secrets.AZURE_AAD_ID }}
        APPLE_KEY_CODE: ${{ secrets.APPLE_KEY_CODE }}
        APPLE_SIGNING_OP_CODE: ${{ secrets.APPLE_SIGNING_OPERATION_CODE }}
      run: |
        python git\.github\scripts\run-esrp-signing.py build_artifacts `
         $env:APPLE_KEY_CODE $env:APPLE_SIGNING_OP_CODE `
         --params 'Hardening' '--options=runtime'

    - name: Unzip signed build artifacts
      shell: pwsh
      run: |
        Expand-Archive signed/build_artifacts.zip -DestinationPath signed
        Remove-Item signed/build_artifacts.zip

    - name: Upload signed payload
      uses: actions/upload-artifact@v3
      with:
        name: osx-signed-payload
        path: |
          signed

  # Build & sign Ubuntu package
  ubuntu_build:
    runs-on: ubuntu-18.04
    needs: prereqs
    steps:
      - name: Install git dependencies
        run: |
          set -ex

          sudo apt-get update -q
          sudo apt-get install -y -q --no-install-recommends gettext libcurl4-gnutls-dev libpcre3-dev asciidoc xmlto
      - name: Clone git
        uses: actions/checkout@v2
        with:
          path: git
      - name: Build and package .deb
        run: |
          set -ex

          die () {
              echo "$*" >&2
              exit 1
          }

          echo "${{ needs.prereqs.outputs.tag_version }}" >>git/version
          make -C git GIT-VERSION-FILE

          VERSION="${{ needs.prereqs.outputs.tag_version }}"

          ARCH="$(dpkg-architecture -q DEB_HOST_ARCH)"
          if test -z "$ARCH"; then
            die "Could not determine host architecture!"
          fi

          PKGNAME="microsoft-git_$VERSION"
          PKGDIR="$(dirname $(pwd))/$PKGNAME"

          rm -rf "$PKGDIR"
          mkdir -p "$PKGDIR"

          DESTDIR="$PKGDIR" make -C git -j5 V=1 DEVELOPER=1 \
            USE_LIBPCRE=1 \
            NO_CROSS_DIRECTORY_HARDLINKS=1 \
            ASCIIDOC8=1 ASCIIDOC_NO_ROFF=1 \
            ASCIIDOC='TZ=UTC asciidoc' \
            prefix=/usr/local \
            gitexecdir=/usr/local/lib/git-core \
            libexecdir=/usr/local/lib/git-core \
            htmldir=/usr/local/share/doc/git/html \
            install install-doc install-html

          cd ..
          mkdir "$PKGNAME/DEBIAN"

          # Based on https://packages.ubuntu.com/xenial/vcs/git
          cat >"$PKGNAME/DEBIAN/control" <<EOF
          Package: microsoft-git
          Version: $VERSION
          Section: vcs
          Priority: optional
          Architecture: $ARCH
          Depends: libcurl3-gnutls, liberror-perl, libexpat1, libpcre2-8-0, perl, perl-modules, zlib1g
          Maintainer: Git Fundamentals <git-fundamentals@github.com>
          Description: Git client built from the https://github.com/microsoft/git repository,
            specialized in supporting monorepo scenarios. Includes the Scalar CLI.
          EOF

          dpkg-deb --build "$PKGNAME"

          mkdir $GITHUB_WORKSPACE/artifacts
          mv "$PKGNAME.deb" $GITHUB_WORKSPACE/artifacts/
      - name: Publish unsigned .deb package
        uses: actions/upload-artifact@v2
        with:
          name: deb-package-unsigned
          path: artifacts/
  ubuntu_sign-artifacts:
    runs-on: windows-latest # Must be run on Windows due to ESRP executable OS compatibility
    needs: [ubuntu_build, prereqs]
    if: needs.prereqs.outputs.deb_signable == 'true'
    env:
      ARTIFACTS_DIR: artifacts
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          path: 'git'
      - name: Download unsigned packages
        uses: actions/download-artifact@v2
        with:
          name: deb-package-unsigned
          path: unsigned
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up ESRP client
        shell: pwsh
        env:
          AZURE_VAULT: ${{ secrets.AZURE_VAULT }}
          AUTH_CERT: ${{ secrets.AZURE_VAULT_AUTH_CERT_NAME }}
          REQUEST_SIGNING_CERT: ${{ secrets.AZURE_VAULT_REQUEST_SIGNING_CERT_NAME }}
        run: |
          git\.github\scripts\set-up-esrp.ps1
      - name: Sign package
        shell: pwsh
        env:
          AZURE_AAD_ID: ${{ secrets.AZURE_AAD_ID }}
          LINUX_KEY_CODE: ${{ secrets.LINUX_KEY_CODE }}
          LINUX_OP_CODE: ${{ secrets.LINUX_OPERATION_CODE }}
        run: |
          python git\.github\scripts\run-esrp-signing.py unsigned $env:LINUX_KEY_CODE $env:LINUX_OP_CODE
      - name: Upload signed artifact
        uses: actions/upload-artifact@v2
        with:
          name: deb-package-signed
          path: signed
  # End build & sign Ubuntu package